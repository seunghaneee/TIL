# =================================================================================
# 버블 정렬
# =================================================================================
list_a = [55, 7, 78, 12, 42]
print('버블 정렬')
print(f'원본 리스트: {list_a}')
# 전체 순회를 해서 최대값을 마지막 인덱스로 이동시킨 후
# 전체 순회-1 해서 그 다음 최대값을 또 이동시키는 과정을 반복

# 전체 순회를 위한 리스트 길이
N = len(list_a)

# 전체 순회
# 순회 횟수가 점점 감소하면서 마지막에 2개 남았을 때는 1번만 해도 된다.
for i in range(N-1, 0, -1):
    for j in range(0, i):
        if list_a[j] > list_a[j+1]:
            list_a[j], list_a[j+1] = list_a[j+1], list_a[j]
print(f'정렬 리스트: {list_a}')
print('============================================')


# ====================================================================================
# 카운팅 정렬
# ====================================================================================
list_b = [55, 7, 78, 12, 42, 0]
print('카운팅 정렬')
print(f'원본 리스트: {list_b}')

# 각 리스트에서 항목들의 발생 횟수를 카운트 한다.
# 이 때 리스트에서 가장 큰 값을 count의 길이로 정하는데 여유값을 더 줘도 된다.
max_number = list_b[0]
for i in range(len(list_b)-2):
    if list_b[i] > list_b[i+1]:
        max_number = list_b[i]
# print(max_number)

N = len(list_b)
C = [0] * (max_number + 1)
sorted_list = [0] * N

# 각 숫자를 카운트 해서 카운트 리스트에 담아준다
for i in range(0, N):
    C[list_b[i]] += 1

# 각 항목의 앞에 위치할 항목의 개수를 반영하기 위해 C원소 조정
for i in range(1, len(C)):
    C[i] += C[i-1]

for i in range(N-1, -1, -1):
    C[list_b[i]] -= 1
    sorted_list[C[list_b[i]]] = list_b[i]
print(f'정렬 리스트: {sorted_list}')
